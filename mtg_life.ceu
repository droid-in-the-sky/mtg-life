/*
- TODO:
- resizable win
- 5 players
- quit on power or redraw right
- quit on BACK
- +5 / -5
*/

@include(sdl.ceu);
@include(lua.ceu);

C _DIR(), _DIR_;
C do
    static char* DIR_;
    char DIR_path[256];

    char* DIR (char* filename) {
        snprintf(DIR_path, 255, "%s/%s", DIR_, filename);
        return DIR_path;
    }
end

input void START;
input void SDL_REDRAW;
input void SDL_QUIT;
//input int  SDL_DT;
//input _SDL_WindowEvent*      SDL_WINDOWEVENT;
input _SDL_KeyboardEvent*    SDL_KEYDOWN;
input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONDOWN;
input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONUP;

interface Global with
// lua
    var   _lua_State*    lua;
    event _Mix_Chunk*    go_sound;
    var _SDL_Renderer*   ren;
    var _SDL_Rect        win_rect;
    var _SDL_Texture*    tex_life, tex_poison;
    var _SDL_Texture*[5] tex_icos;
    var _TTF_Font*       fnt_cnt, fnt_his;
    var _Mix_Chunk*      snd_click, snd_swap, snd_dice;
    var int              mute?;
end

// TODO: check all

// lua
    var _lua_State* lua := _luaL_newstate();
    _lua_atpanic(lua, _ceu_lua_atpanic);
    _luaL_openlibs(lua);

// screen
    var _SDL_Rect win_rect;
        win_rect.x = 0;
        win_rect.y = 0;
    var _SDL_Window* win := _SDL_CreateWindow("MTG Trader",
                                500, 1300, 320, 240, _SDL_WINDOW_SHOWN);
                                //500, 1300, 400, 240, _SDL_WINDOW_SHOWN);
                                //500, 1300, 432, 240, _SDL_WINDOW_SHOWN);
                                //500, 1300, 480, 320, _SDL_WINDOW_SHOWN);
                                //500, 1300, 640, 480, _SDL_WINDOW_SHOWN);
                                //500, 1300, 800, 480, _SDL_WINDOW_SHOWN);
                                //500, 1300, 1280, 800, _SDL_WINDOW_SHOWN);
                                //500, 1300, 800, 480, _SDL_WINDOW_RESIZABLE);
    //_SDL_SetWindowFullscreen(win, _SDL_TRUE);
    _SDL_GetWindowSize(win, &win_rect.w, &win_rect.h);
        _lua_pushnumber(lua, win_rect.w);   // [ W ]
        _lua_setglobal(lua, "UI_W");        // [ ]
        _lua_pushnumber(lua, win_rect.h);   // [ H ]
        _lua_setglobal(lua, "UI_H");        // [ ]

    if win_rect.h < 400 then
        _DIR_ = "imgs/low";
    else/if win_rect.h < 800 then
        _DIR_ = "imgs/medium";
    else
        _DIR_ = "imgs/medium";
    end

    var _SDL_Renderer* ren := _SDL_CreateRenderer(win, -1,
                                _SDL_RENDERER_ACCELERATED|_SDL_RENDERER_PRESENTVSYNC);

var _SDL_Texture* tex_life   := _IMG_LoadTexture(ren, _DIR("life.png"));
var _SDL_Texture* tex_poison := _IMG_LoadTexture(ren, _DIR("poison.png"));
var _SDL_Texture* tex_mute   := _IMG_LoadTexture(ren, _DIR("no.png"));

// ICOS
var _SDL_Texture*[5] tex_icos;
    tex_icos[0] := _IMG_LoadTexture(ren, _DIR("MTG_White.png"));
    tex_icos[1] := _IMG_LoadTexture(ren, _DIR("MTG_Blue.png"));
    tex_icos[2] := _IMG_LoadTexture(ren, _DIR("MTG_Black.png"));
    tex_icos[3] := _IMG_LoadTexture(ren, _DIR("MTG_Red.png"));
    tex_icos[4] := _IMG_LoadTexture(ren, _DIR("MTG_Green.png"));

_TTF_Init();
var _TTF_Font* fnt_cnt := _TTF_OpenFont("fnts/Deutsch.ttf", win_rect.h/8);
var _TTF_Font* fnt_his := _TTF_OpenFont("fnts/Deutsch.ttf", win_rect.h/16);

var int dice? = 0;
var int dice_v;
var UITexture[20] dice_nums;
do
    var _SDL_Color clr;
        clr.r = 255;
        clr.g = 255;
        clr.b = 255;
    loop i, 20 do
        var UITexture* d = &dice_nums[i];
        var _char[5] str;
        _sprintf(str, "%d%d", (i+1)/10, (i+1)%10);
        var _SDL_Surface* sfc :=
                _TTF_RenderText_Blended(fnt_cnt, str, clr);
        d:tex := _SDL_CreateTextureFromSurface(ren, sfc);
        d:tex_own? = 1;
        emit d:go;
        emit d:go_redim = &win_rect;
        _SDL_FreeSurface(sfc);
    end
end

_Mix_OpenAudio(22050, _AUDIO_S16SYS, 2, 4096);
event _Mix_Chunk* go_sound;
var int mute? = 0;
var _Mix_Chunk* snd_click := _Mix_LoadWAV("snds/click.wav");
var _Mix_Chunk* snd_swap  := _Mix_LoadWAV("snds/swap.wav");
var _Mix_Chunk* snd_dice  := _Mix_LoadWAV("snds/dice.wav");

@include(ui.ceu);
@include(uigrid.ceu);
@include(luagrid.ceu);
@include(player.ceu);

C _rand(), _srand(), _time();
_srand(_time(null));

var int idx = _lua_gettop(lua);
_luaL_dofile(lua, "lua/global.lua");
_luaL_dofile(lua,
    "/data/data/org.droid_in_the_sky.mtg_life/lib/lib_lua_global.so");
_lua_settop(lua, idx);

do      // LOCALS

    // MAIN
    var LuaGrid main;
        _lua_getglobal(lua, "grid_main");       // [ t ]
        main.ref = _luaL_ref(lua, _LUA_REGISTRYINDEX);
        emit main.go;                           // [ ]
        emit main.grid.go_redim = &win_rect;

    var UIGrid* bar = <UIGrid*> main.grid.uis[0];
    var UIGrid* pls = <UIGrid*> main.grid.uis[1];

    event int  go_pls;
    event void go_new;

    par/or do
    // PLAYERS
        await START;
        go_pls = 2;
        loop do
            var Player p1, p2, p3, p4;
                p1.n=0; emit p1.go;
                p2.n=1; emit p2.go;
                p3.n=2; emit p3.go;
                p4.n=3; emit p4.go;
                pls:uis[0] = &p1;
                pls:uis[1] = &p2;
                pls:uis[2] = &p3;
                pls:uis[3] = &p4;

            par/or do
                await go_new;
            with
                loop do
                    par/or do
                        await go_pls;
                    with
                        pls:uis_n = go_pls;
                        if go_pls == 1 then
                            pls:lay_lins = 1;
                            pls:lay_cols = 1;
                        else/if go_pls == 2 then
                            pls:lay_lins = 1;
                            pls:lay_cols = 2;
                        else/if go_pls == 3 then
                            pls:lay_lins = 1;
                            pls:lay_cols = 3;
                        else/if go_pls == 4 then
                            pls:lay_lins = 2;
                            pls:lay_cols = 2;
                        end
                        emit pls:go_redim=null;
                        await FOREVER;
                    end
                end
            end
        finally
            pls:uis[0] = null;
            pls:uis[1] = null;
            pls:uis[2] = null;
            pls:uis[3] = null;
        end
    with
    // CLICKS
        loop do
            var int it = await bar:ok_uiclicked;
            if it == 1 then         // NEW
                emit go_sound = snd_swap;
                emit go_new;
            else/if it == 2 then    // PLS
                emit go_sound = snd_swap;
                emit go_pls = go_pls%4 + 1;
            else/if it == 3 then    // MUTE
                mute? = not mute?;
                emit go_sound = snd_swap;
            else/if it == 4 then    // DICE
                emit go_sound = snd_dice;
                await 1s500ms;
                dice?  = 1;
                dice_v = _rand() % 20;
                await SDL_MOUSEBUTTONDOWN;
                dice? = 0;
            end
        end
    with
        await SDL_QUIT;
    with

    /**
        // SIMUL
        @include(simul.ceu);
        // TODO: get allocated memory
    with
    **/

        // SOUND
        loop do
            var _Mix_Chunk* snd = await/0 go_sound;
            if not mute? then
                _Mix_PlayChannel(-1, snd, 0);
            end
        end
    with
        // MOUSE
        loop do
            var _SDL_MouseButtonEvent* but = await SDL_MOUSEBUTTONDOWN;
            emit main.grid.go_mousebuttondown=but;
        end
    with
        // REDRAW
        loop do
            await SDL_REDRAW;
            emit main.grid.go_redraw;

            if mute? then
                _SDL_RenderCopy(ren, tex_mute, null, &bar:uis[2]:rect);
            end

            if dice? then
                var _SDL_Rect r;
                    r.x = win_rect.w/4;
                    r.y = win_rect.h/4;
                    r.w = win_rect.w/2;
                    r.h = win_rect.h/2;
                _SDL_SetRenderDrawColor(ren, 0x40,0x0D,0x12, 0);
                _SDL_RenderFillRect(ren, &r);
                _SDL_SetRenderDrawColor(ren, 0x00,0x00,0x00, 0);
                _SDL_RenderDrawRect(ren, &r);

                emit dice_nums[dice_v].go_redraw;
            end

            _SDL_RenderPresent(ren);
        end
    end

end     // LOCALS

_Mix_FreeChunk(snd_click);
_Mix_FreeChunk(snd_swap);
_Mix_FreeChunk(snd_dice);
_Mix_CloseAudio();            // TODO: slow

_TTF_CloseFont(fnt_cnt);
_TTF_CloseFont(fnt_his);
_TTF_Quit();

loop i, 5 do
    _SDL_DestroyTexture(tex_icos[i]);
end

_SDL_DestroyTexture(tex_life);
_SDL_DestroyTexture(tex_poison);
_SDL_DestroyTexture(tex_mute);

_SDL_DestroyRenderer(ren);
_SDL_DestroyWindow(win);

return 0;
