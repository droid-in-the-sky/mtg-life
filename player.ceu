/*{-{*/

C _CLRS, _CLRS_cur;
C do
    int CLRS[][3] = {
        { 0xEE, 0xED, 0xF0 },
        { 0x9B, 0xD2, 0xD2 },
        { 0x59, 0x4F, 0x52 },
        { 0xFF, 0x7A, 0x7A },
        { 0x96, 0xB5, 0x66 }
    };
    int CLRS_cur[] = { 0, 1, 2, 3 };
end

@include(counter.ceu);

class Player with
    interface UI;
    var int n;
do
    n = 0;

    await/0 go;

    var int life? = 1;
    var Counter life;
        life.counter = 20;
        emit life.go;

    var int poison? = 0;
    var Counter poison;
        poison.counter = 0;
        emit poison.go;

    // color
    event void go_ico;
    var _SDL_Rect ico_r;
    _SDL_QueryTexture(global:tex_icos[0], null, null, &ico_r.w, &ico_r.h);

    // swap
    var _SDL_Rect swp_r;
    _SDL_QueryTexture(global:tex_life, null, null, &swp_r.w, &swp_r.h);

    par/or do
        var _SDL_Rect* r = await/0 go_redim;
        loop do
            this.rect = *r;

            // ico
                ico_r.x = rect.x + global:win_rect.w/100;
                ico_r.y = rect.y + global:win_rect.h/100;

            emit life.grid:go_redim = r;
            emit poison.grid:go_redim = r;

            // swp
                var _SDL_Rect* rd = &life.grid:ui_rects[1];
                swp_r.x = rd:x - swp_r.w - rd:w/10;
                swp_r.y = rd:y + (rd:h-swp_r.h)/2;

            r = await go_redim;
        end
    with
        loop do
            var _SDL_MouseButtonEvent* but = await go_mousebuttondown;

            if _SDL_Rect_vs_Mouse(&ico_r,but) then
                emit global:go_sound = global:snd_swap;
                _CLRS_cur[this.n] = (_CLRS_cur[n] + 1) % 5;

            else/if _SDL_Rect_vs_Mouse(&swp_r,but) then
                emit global:go_sound = global:snd_swap;
                life?   = not life?;
                poison? = not poison?;

            else/if life? then
                emit life.grid:go_mousebuttondown = but;
            else/if poison? then
                emit poison.grid:go_mousebuttondown = but;
            end
        end
     with

        // REDRAW
        do
            var _SDL_Renderer* ren = global:ren;

            loop do
                await go_redraw;

                // background
                var int* clr = _CLRS[ _CLRS_cur[this.n] ];
                _SDL_SetRenderDrawColor(ren, clr[0], clr[1], clr[2], 0);
                _SDL_RenderFillRect(ren, &this.rect);

                // frame
                _SDL_SetRenderDrawColor(ren, 0, 0, 0, 0);
                _SDL_RenderDrawRect(ren, &this.rect);

                // color
                _SDL_RenderCopy(ren, global:tex_icos[_CLRS_cur[this.n]],
                                    null, &ico_r);

                // life / poison
                if life? then
                    _SDL_RenderCopy(ren, global:tex_life, null, &swp_r);
                    emit life.grid:go_redraw;
                else/if poison? then
                    _SDL_RenderCopy(ren, global:tex_poison, null, &swp_r);
                    emit poison.grid:go_redraw;
                end
            end
        end
    end
end

/*}-}*/ dnl
